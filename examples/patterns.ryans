let x = 1;
x
---
let x = 1;
let y = x;
{ z: y }
---
let Foo x = 1;
Foo []
---
let Foo x = y;
let y = 1;
Foo 3.14
---
let Foo [a, b] = a;
Foo [1, 3.14]
---
let Foo { a } = a;
Foo { a: 1 }
---
let Foo { a, .. } = a;
Foo { b: 2, a: 1 }
---
let Foo { b: a } = a;
Foo { b: 1 }
---
let Foo { z: [a, b] } = [b, a];
Foo { z: [1, 2] }
---
let Foo { z: [a, b], c } = [a, b, c];
Foo { z: [1, 2], "c": 3 }
---
let x = 1;
let Y [] = x;
let x = 2;
Y []
---
let Y [] = z;
let z = 2;
Y []
---
let Foo [] = [Foo []];
Foo []
---
let x [] = 
    let y = 2;
    y;
x []
---
let Foo 1 = 2;
Foo 2
---
let SubN x =
    let Sub y = x - y;
    Sub;
SubN 2 3
---
let VeryTrue _ = true;
VeryTrue VeryTrue
---
let Foo [ a, b, .. ] = [b, a];
Foo [ 1, 2, 3]
---
let Foo [ .., a, b ] = [b, a];
Foo [1, 2, 3]
---
let Foo [ .. ] = "hurraay!";
Foo [1, 2, 3]
---
let Foo [ a, .. ] = "hurraay!";
Foo [ ]
---
let Foo { a } = "hurraay!";
Foo {a: 1, b: 2}
---
let [x, y, z] = [1, 2, 3];
x + y + z
---
let [x, ..] = range[1,10];
x
---
let {x, y} = 
    let z = 2;
    {"x": 1, "y":z };
z + y - x

---
let x [] = 
    let y = 2;
    y;
x
---
let Foo true = 1;
let Foo false = 2;
{ t: Foo true, f: Foo false }
---
let assert true = null;
assert 2 == 1
---
let Foo x = x + 1;
Foo Foo Foo Foo Foo 0
---
let Foo 2 = 0;
let Foo x = x + 1;
[
    Foo 0,
    Foo Foo 0,
    Foo Foo Foo 0,
    Foo Foo Foo Foo 0,
    Foo Foo Foo Foo Foo 0,
]
---
let Pow2 1 = 1;
let Pow2 x = Pow2 (x - 1);
Pow2 10
